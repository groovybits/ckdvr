# Chris Kennedy, September 2003
# KMOS-TV

# Global Configuration of DVR 

# Main Path
$DVRPATH = "/opt/dvr";

# Set Path
$ENV{'PATH'} = $DVRPATH . "/bin:/usr/X11R6/bin:/bin:/usr/bin";

# Set Display
$DISPLAY = ":0";
$ENV{'DISPLAY'} = $DISPLAY;

# Modules
$SCHEDULER = $DVRPATH . "/bin/scheduler";
$DECODER = $DVRPATH . "/bin/decoder";
$ENCODER = $DVRPATH . "/bin/encoder";
$DVRCMD = $DVRPATH . "/bin/dvrcmd";
$D2UCMD = $DVRPATH . "/bin/date2unix";
$U2DCMD = $DVRPATH . "/bin/unix2date";

# Startup Mode
$MODE = "manual";

# File Extension Used
$EXTENSION = "mpg";

# Set Storage Directory
$STORAGE = "/u2";

# Set Log Files
$ERRORLOG = $DVRPATH . "/log/error";
$MSGLOG = $DVRPATH . "/log/messages";
$ENCODELOG = $DVRPATH . "/log/encode";
$DECODELOG = $DVRPATH . "/log/decode";
$ARCHIVELOG = $DVRPATH . "/log/archives";

# Schedules
$LIBRARY = $DVRPATH . "/db/library";
$ENCODETODAY = $DVRPATH . "/schedule/encode_today";
$DECODETODAY = $DVRPATH . "/schedule/decode_today";
$S_DEC_L = $DVRPATH . "/lock/decode_l";
$S_ENC_L = $DVRPATH . "/lock/encode_l";

# Lock Files
$ENCODELOCK = $DVRPATH . "/lock/encode/";
$DECODELOCK = $DVRPATH . "/lock/decode/";
$ENCMANUALMODE = $DVRPATH . "/lock/enc_manual";
$DECMANUALMODE = $DVRPATH . "/lock/dec_manual";

# Encoder
$encoder = $DVRPATH . "/sbin/encoder_";

# Init load Modules
$init_dvr = $DVRPATH . "/sbin/dvrboot";

# MPLAYER PID
$MPLAYERPID = $DVRPATH . "/lock/decode/mplayer.pid";

# Decoder 
$decoder = "/usr/bin/mplayer";
# dxr3
$decoder_args .= " -vo dxr3 -ao oss:/dev/em8300_ma-0";

# Video Lan
$video_lan_path = "\\Bcs-dvr\public\apps\vlc-0.6.2\vlc.exe http://153.91.87.102/video/Scratch/";
$web_vpath = "/video/Scratch";

# MISC
$NULL = "";

sub time_stamp 
{
  $unixtime = `date +%s`;
  chomp($unixtime); 
  return "$unixtime";
}

sub rebuild_library 
{
}

sub unix2date($)
{
  (@time) = localtime($_[0]);
  @Months = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
            'Oct', 'Nov', 'Dec');
  @Days = ('Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun');
  @TZ = ('CST','CDT');

  $day = $Days[$time[6]];
  $month = $Months[$time[4]];
  $mday= $time[3];
  $hour = $time[2];
  $min = $time[1];
  $sec = $time[0];
  $tz = $TZ[$time[8]];
  $year = 1900 + $time[5];
  $date = "$day $month $mday $hour:$min:$sec $tz $year";

  return $date;
}


1;
# ($year, $month, $day, $hour, $min, $sec) = @ARGV;

#if("$year" eq '') {
#  print "Usage: $0 year month day hour min sec\n";
#  exit 1;
#}

#printf("%s\n", &mktime($sec,$min,$hour,$month,$day,$year));


sub date2unix {

	use Time::Local;

	# Taking in the arguments passed to get_day_seconds()

	$p_month = $_[3];
	$p_day = $_[4];
	$p_year = $_[5];
	$sec = $_[0];
	$min = $_[1];
	$hour = $_[2];

	@monthdays = ('31','28','31','30','31','30','31','31','30','31','30','31');

	if(($p_month == 1)||($p_month == 3)||($p_month == 5)||($p_month == 7)||($p_month == 8)||($p_month == 10)||($p_month == 12)) {

		if($p_day > 31) {
			$p_month += 1;
			$p_day -= 31;
			if($p_month == 12) {
				$p_year += 1;
			}
		}
		if($p_day <= 0) {
			$p_month -= 1;
			$p_day += 31;
			if($p_month == 1) {
				$p_year -= 1;
			}
		}

	}
	if(($p_month == 4)||($p_month == 6)||($p_month == 9)||($p_month == 11)) {

		if($p_day > 30) {
			$p_month += 1;
			$p_day -= 30;
		}
		if($p_day <= 0) {
			$p_month -=1;
			$p_day += 30;
		}

	}
	if($p_month == 2) {
		if((($p_year%4==0)&&($p_year%100!=0))||($p_year%400==0)) {
			if($p_day > 29) {
				$p_month += 1;
				$p_day -= 29;
			}
			if($p_day <= 0) {
				$p_month -= 1;
				$p_day += 29;
			}
		}
		else {
			if($p_day > 28) {
				$p_month += 1;
				$p_day -= 28;
			}
			if($p_day <= 0) {
				$p_month -= 1;
				$p_day += 28;
			}
		}
	}

	$seconds = timelocal($sec,$min,$hour,$p_day,$p_month-1,$p_year);

	return $seconds;

}

