#!/usr/bin/avview_shell
#
# avviewrec - scripted recording for the GATOS project's aaview tv
# viewer.  Takes a channel, duration in minutes, and mute or not as
# arguments.  Here, look:
# To record channel 2 for 35 minutes and mute the sound (but still
# record the sound):
# avviewrec c 2 m 35 q 1
#
# Same thing:
# avviewrec channel 2 minutes 35 mute 1
#
# Good enough?  I think so.

# vars for arguments
global passed_channel
global passed_minutes
global mute_audio
set mute_audio "0"
global filename
set filename ""
global vc
set vc "MPEG-1"
global ac
set ac "MPEG-2"
global vm
set vm "half-rate"
global vr
set vr "one half"
global fmt
set fmt "MPEG"
global asr
set asr "44100"
global abr 
set abr "128000"
global vbr
set vbr "300000"
global vq
set vq "6"
global bc
set bc "Fix quality"
global in
set in "ntsc-composite"
global fsp
set fsp ""

# parse arguments
foreach {arg val} $argv {
	puts "arg:$arg - val:$val\n"
	switch $arg {
		"ch" {set channel $val}
		"m" {set passed_minutes "set record_duration $val"}
		"mu" {set mute_audio $val}
		"fsp" {set fsp $val}
		"f" {set filename $val} 
		"vc" {set vc $val}
		"ac" {set ac $val}
		"vm" {set vm $val}
		"vr" {set vr $val}
		"fmt" {set fmt $val}
		"asr" {set asr $val}
		"abr" {set abr $val}
		"vbr" {set vbr $val}
		"vq" {set vq $val}
		"bc" {set bc $val}
		"i" -
		"in" {set in $val}
		default {
			puts "Bad argument: $arg"
			puts "Arguments:"
			puts "ch \t:Channal ()."
			puts "in \t:Input (ntsc-composite,ntsc-svideo,ntsc-tuner)."
			puts "m \t:Minutes (duration) to record."
			puts "mu \t:Mute master volume (1) or not (0)."
			puts "fsp \t:File Save Path ()."
			puts "f \t:Basename of file to save."
			puts "vq \t:Video Quality (2-31)."
			puts "vm \t:V4L Mode (double-interpolate,half-rate,half-width)."
			puts "fmt \t:Format (MPEG,AVI)."
			puts "vc \t:Video Codec (MPEG-1,MSMPEG-4,H263P)."
			puts "ac \t:Audio Codec (MPEG-2,AC3)."
			puts "vr \t:Video Rate (one half,one quarter)."
			puts "asr \t:Audio Sample Rate (44100)."
			puts "abr \t:Audio Bitrate (256000)."
			puts "vbr \t:Video Bitrate (2500000."
			puts "bc \t:Bitrate Control (Fix quality,Fix bitrate)."
			puts "\n"
			exit
		}
	}
}
# Vladimir's stuff (This will bring up the tv as it was last closed,
# we don't _really_ need all that. Feel free to improve/simplify.)
source /usr/local/bin/start_avview

# decipher arguments
# I'd like to have stuff here to validate the values passed to
# avviewrec, but I don't know Tcl well enough.  I gave up for now.
global record_duration
eval $passed_minutes
set record_duration [expr int(60 * $record_duration * 1000 + 5000)]
puts "record_duration: $record_duration\n"

# Procs I redid to remove references to window objects.
#PROC###############################################################
# on_v4l_capture_set2
####################################################################
proc on_v4l_capture_set2 {name1 name2 w } {
global v4l_capture_on
global ffmpeg_video_codec
global ffmpeg_audio_codec
global current_v4l_mode
global current_v4l_rrate
global ffmpeg_file_format
global current_capture_filename
global file_save_path
global ffmpeg_audio_sample_rate
global current_video_rate
global ffmpeg_audio_bitrate
global ffmpeg_video_bitrate
global ffmpeg_video_quality
global ffmpeg_video_bitrate_control
global current_alsa_device
set current_alsa_device "hw:CARD=0"

if { $v4l_capture_on } {
	set status [ffmpeg_encode_v4l_stream -v4l_handle current_v4l_handle \
				-video_codec $ffmpeg_video_codec \
				-audio_codec $ffmpeg_audio_codec \
				-deinterlace_mode $current_v4l_mode \
				-step_frames $current_v4l_rrate \
				-av_format $ffmpeg_file_format \
				-audio_device "$current_alsa_device" \
				-audio_rate "$ffmpeg_audio_sample_rate" \
				-audio_bitrate "$ffmpeg_audio_bitrate" \
				-v4l_rate "$current_video_rate" \
				-video_bitrate "$ffmpeg_video_bitrate" \
				-video_quality "$ffmpeg_video_quality" \
				-video_bitrate_control "$ffmpeg_video_bitrate_control" \
				-filename "$file_save_path/$current_capture_filename"]
	if { "$status" == "" } {
		after cancel "check_fifo $cw"
		after 800 "check_fifo $cw"
		} {
		puts "Could not start recording:\n$status"
		set v4l_capture_on false
		}
	puts "status=$status"
	} {
	if { [ffmpeg_present] == "yes" } {
		ffmpeg_stop_encoding
		}
	}
}

#PROC###############################################################
# set_v4l_device2
####################################################################
proc set_v4l_device2 {name1 name2 op } {
global current_v4l_device
global v4l_capture_on
v4l_close_device current_v4l_handle
if { "$current_v4l_device" == "none" } {
	puts "current_v4l_device:$current_v4l_device\n"
	set v4l_capture_on false
	return
	}
set status "[v4l_open_device current_v4l_handle $current_v4l_device]"
if { "$status" != "" } {
	puts "status:$status\n"
	set current_v4l_device "none"
	}
}

# Wait sufficient time before starting the recording to allow init
# stuff in avview_start to finish.
after 5000 {
	# Set Global Default Variables
	global current_encoding_name
	set current_encoding_name "$in"
	global current_table_name
	set current_table_name "us-bcast"
	global current_v4l_mode
	set current_v4l_mode "$vm"
	global current_v4l_rrate
	set current_v4l_rrate "$vr"
	global ffmpeg_file_format
	set ffmpeg_file_format "$fmt"
	global ffmpeg_audio_codec
	set ffmpeg_audio_codec "$ac"
	global ffmpeg_audio_sample_rate
	set ffmpeg_audio_sample_rate "$asr"
	global ffmpeg_audio_bitrate
	set ffmpeg_audio_bitrate "$abr"
	global ffmpeg_video_codec
	set ffmpeg_video_codec "$vc"
	global ffmpeg_video_bitrate
	set ffmpeg_video_bitrate "$vbr"
	global ffmpeg_video_quality
	set ffmpeg_video_quality "$vq"
	global ffmpeg_video_bitrate_control
	set ffmpeg_video_bitrate_control "$bc"
	global ffmpeg_max_fifo_size
	set ffmpeg_max_fifo_size "500"
	global ffmpeg_recording_chunk_size
	set ffmpeg_recording_chunk_size "2000"
	
	#global current_channel
	#set current_channel ""
	#global attributes_window
	#set attributes_window "true"
	#global capture_window
	#set capture_window "1"
	#global alsa_window
	#set alsa_window "1"
	#global show_control_window
	#set show_control_window "1"

	# Unmute and raise volume for recording
	max_volume

	# Did user want to mute sound?
	if {$mute_audio == "1"} {
		#This won't do as expected if audio is already muted.
		toggle_mute
	}

	if {$filename == ""} {
		set current_capture_filename "testing.avi"
	} {
		set current_capture_filename $filename
	}

	global file_save_path
	set file_save_path "$fsp"
	global current_alsa_device1
	set current_alsa_device1 "hw:CARD=0"
	global current_v4l_device
	trace variable current_v4l_device w "set_v4l_device2"
	set current_v4l_device "/dev/video0"
	puts "current_v4l_device:$current_v4l_device\n"
	puts "Preparing to record..."
	global v4l_capture_on
	trace variable v4l_capture_on w "on_v4l_capture_set2"
	set v4l_capture_on true
}

# Stop recording when duration is over (plus an extra 5 seconds for the
# "after 5000" above.)
after $record_duration {
	set v4l_capture_on false
	puts "Recording done!"
	exit
}



proc max_volume {} {
global VIDEO_WINDOW
global current_port
if { $current_port == "none" } { return }
set num_attributes [xv_num_port_attributes $VIDEO_WINDOW $current_port]
for { set i 0 } { $i < $num_attributes } { incr i } {
        set name [xv_port_attribute_name $VIDEO_WINDOW $current_port $i]
        if { $name == "XV_MUTE" } {
                set variable [find_attribute_variable $VIDEO_WINDOW $current_port $i]
                global $variable
                catch {
                        if { [xv_getportattribute $VIDEO_WINDOW $current_port $name] } { set $variable 1 } { set $variable 1 }
                        on_attribute_change XV_MUTE $variable a b
                        switch_to_control XV_VOLUME; change_control 1000
                        }
                return
                }
        }
}

